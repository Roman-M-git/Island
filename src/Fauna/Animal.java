package Fauna;

import MapEngine.Coordinate;
import MapEngine.Island;
import SupportClasses.Statistics;

import java.util.List;
import java.util.Random;

public abstract class Animal {
    // ==== –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ====
    protected String name;
    protected double weight;
    protected double maxWeight;
    protected int maxCountOnCell;
    protected int speed;
    protected double foodNeed;
    protected boolean alive = true;

    // ==== –°–æ—Å—Ç–æ—è–Ω–∏–µ ====
    protected double hunger;  // 1.0 = —Å—ã—Ç, 0.0 = —É–º–∏—Ä–∞–µ—Ç
    protected int age = 0;
    protected int maxAge;
    protected Coordinate position;

    protected final Random random = new Random();

    // ==== –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ====
    public Animal(String name, double maxWeight, int maxCountOnCell, int speed, double foodNeed) {
        this.name = name;
        this.maxWeight = maxWeight;
        this.weight = maxWeight;
        this.maxCountOnCell = maxCountOnCell;
        this.speed = speed;
        this.foodNeed = foodNeed;
        this.hunger = 1.0;

        // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        Statistics.registerAnimal(this);
    }

    // ==== –õ–æ–≥–∏–∫–∞ –∂–∏–∑–Ω–∏ ====

    /** –û–¥–∏–Ω —à–∞–≥ –∂–∏–∑–Ω–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ */
    public void liveCycle(Island island) {
        if (!alive) return;

        age++;
        decreaseHunger();
        move(island);
        deathCheck();
    }

    /** –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—ã—Ç–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —à–∞–≥ */
    protected void decreaseHunger() {
        hunger -= 0.1; // —Ç–µ—Ä—è–µ—Ç 10% —Å—ã—Ç–æ—Å—Ç–∏ –∑–∞ —à–∞–≥
        if (hunger < 0) hunger = 0;
    }

    /** –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏ –∏–ª–∏ –≥–æ–ª–æ–¥–∞ */
    protected void deathCheck() {
        if (!alive) return;

        if (hunger <= 0) {
            alive = false;
            Statistics.markDeath(this, false);
           // System.out.println(name + " died of hunger ‚ò†Ô∏è");
        } else if (age >= maxAge) {
            alive = false;
            Statistics.markDeath(this, false);
           // System.out.println(name + " died of old age üïØÔ∏è");
        }
    }

    // ==== –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ====

    /** –î–≤–∏–≥–∞–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ */
    public void move(Island island) {
        if (!alive || position == null) return;

        int dx = random.nextInt(speed * 2 + 1) - speed;
        int dy = random.nextInt(speed * 2 + 1) - speed;

        int newX = Math.max(0, Math.min(island.getWidth() - 1, position.x + dx));
        int newY = Math.max(0, Math.min(island.getHeight() - 1, position.y + dy));

        position = new Coordinate(newX, newY);
    }

    /** –ï–¥–∞ ‚Äî —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö */
    public abstract void eat(List<Animal> others);

    /** –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ ‚Äî –µ—Å–ª–∏ —Ä—è–¥–æ–º –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä */
    public Animal reproduce(List<Animal> sameSpecies) {
        if (!alive || sameSpecies.size() < 2) return null;

        if (random.nextDouble() < 0.3) { // —à–∞–Ω—Å 30%
            Animal child = createChild();

            // ‚úÖ —Å—Ç–∞–≤–∏–º —Ç—É –∂–µ –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ —É —Ä–æ–¥–∏—Ç–µ–ª—è
            if (this.position != null) {
                child.setPosition(new Coordinate(this.position.x, this.position.y));
            }

            // ‚úÖ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            Statistics.markReproduce(child);

            return child;
        }
        return null;
    }

    /** –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç—ë–Ω—ã—à–∞ */
    protected abstract Animal createChild();

    // ==== –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã ====

    public String getName() {
        return name;
    }

    public boolean isAlive() {
        return alive;
    }

    public void setAlive(boolean alive) {
        this.alive = alive;
    }

    public double getHunger() {
        return hunger;
    }

    public void setHunger(double hunger) {
        this.hunger = hunger;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public Coordinate getPosition() {
        return position;
    }

    public void setPosition(Coordinate position) {
        this.position = position;
    }

    public double getWeight() {
        return weight;
    }

    public void setWeight(double weight) {
        this.weight = weight;
    }

    public double getMaxWeight() {
        return maxWeight;
    }

    public void setMaxWeight(double maxWeight) {
        this.maxWeight = maxWeight;
    }

    public int getMaxCountOnCell() {
        return maxCountOnCell;
    }

    public void setMaxCountOnCell(int maxCountOnCell) {
        this.maxCountOnCell = maxCountOnCell;
    }

    public int getSpeed() {
        return speed;
    }

    public void setSpeed(int speed) {
        this.speed = speed;
    }

    public double getFoodNeed() {
        return foodNeed;
    }

    public void setFoodNeed(double foodNeed) {
        this.foodNeed = foodNeed;
    }

    public int getMaxAge() {
        return maxAge;
    }

    public void setMaxAge(int maxAge) {
        this.maxAge = maxAge;
    }
}
